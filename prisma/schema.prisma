// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                        String    @id @default(uuid())
  name                      String
  email                     String
  emailVerified             Boolean
  image                     String?
  createdAt                 DateTime
  updatedAt                 DateTime
  sessions                  Session[]
  accounts                  Account[]
  photos                    Photo[]    // Photos curated by the user
  series                    Series[]   // Series created by the user
  posts                     Post[]     // Scheduled posts by the user
  instagramAccessToken      String?    // Facebook user access token
  instagramPageAccessToken  String?    // Page-specific token for Instagram API
  instagramBusinessAccountId String?   // Instagram Business Account ID

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String   // URL of the photo (e.g., stored on a CDN or Instagram URL)
  creator   String?  // Optional: Creator of the photo
  caption   String?  // Optional: Caption for the photo
  userId    String   // User who curated the photo
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  seriesId  Int?     // Optional: Series this photo belongs to
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  posts     PostPhoto[] // Posts that use this photo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photo")
}

model Series {
  id        Int      @id @default(autoincrement())
  name      String   // Name of the series
  userId    String   // User who created the series
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    Photo[]  // Photos in this series
  posts     Post[]   // Posts associated with this series
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("series")
}

model Post {
  id          Int         @id @default(autoincrement())
  userId      String      // User who scheduled the post
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  seriesId    Int?       // Optional: Series this post belongs to
  series      Series?    @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  scheduledAt DateTime   // When to post
  status      String     // "pending", "posted", "failed"
  postedAt    DateTime?  // When the post was actually made
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  igMediaId   String?
  isCarousel  Boolean    @default(false)
  photos      PostPhoto[] // Relation to photos through PostPhoto
  caption     String?    // Caption for the post

  @@map("post")
}

model PostPhoto {
  id        Int      @id @default(autoincrement())
  postId    Int
  photoId   Int
  order     Int      // Order in the carousel
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, order])
  @@map("post_photo")
}

model Lock {
  id        String   @id
  lockedAt  DateTime
  expiresAt DateTime
}