// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                        String    @id @default(uuid())
  name                      String
  email                     String
  emailVerified             Boolean
  image                     String?
  createdAt                 DateTime
  updatedAt                 DateTime
  sessions                  Session[]
  accounts                  Account[]
  photos                    Photo[]    // Photos curated by the user
  series                    Series[]   // Series created by the user
  posts                     Post[]     // Scheduled posts by the user
  instagramAccessToken      String?    // Facebook user access token
  instagramPageAccessToken  String?    // Page-specific token for Instagram API
  instagramBusinessAccountId String?   // Instagram Business Account ID
  instagramAccounts         InstagramAccount[] // Relation to Instagram accounts

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model InstagramAccount {
  id                        String   @id @default(uuid())
  userId                    String
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramUserId          String   // Instagram's user ID
  username                 String   // Instagram username
  accessToken             String   // Facebook user access token
  pageAccessToken         String   // Page-specific token for Instagram API
  businessAccountId       String   // Instagram Business Account ID
  isActive                Boolean  @default(true)
  lastTokenRefresh        DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  photos                  Photo[]  // Photos associated with this Instagram account
  posts                   Post[]   // Posts made through this account

  @@unique([instagramUserId])
  @@unique([userId, username])
  @@map("instagram_account")
}

model Photo {
  id                Int      @id @default(autoincrement())
  url               String   
  creator           String?  
  caption           String?  
  userId            String   
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccountId String? // Optional: Which Instagram account this photo is associated with
  instagramAccount  InstagramAccount? @relation(fields: [instagramAccountId], references: [id], onDelete: SetNull)
  seriesId          Int?     
  series            Series?  @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  posts             Post[]   
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  sourceUrl         String?  // Original Instagram URL if imported
  instagramMediaId  String?  // Instagram's media ID if posted
  
  @@map("photo")
}

model Series {
  id        Int      @id @default(autoincrement())
  name      String   // Name of the series
  userId    String   // User who created the series
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    Photo[]  // Photos in this series
  posts     Post[]   // Posts associated with this series
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("series")
}

model Post {
  id                Int      @id @default(autoincrement())
  userId            String   
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccountId String  // Which Instagram account to post to
  instagramAccount  InstagramAccount @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  photoId           Int      
  photo             Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  seriesId          Int?     
  series            Series?  @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  scheduledAt       DateTime 
  status            String   // "pending", "posted", "failed"
  postedAt          DateTime? 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  errorMessage      String?  // Store error message if posting fails
  instagramPostId   String?  // Instagram's post ID after successful posting
  
  @@map("post")
}

model Lock {
  id        String   @id
  lockedAt  DateTime
  expiresAt DateTime
}